package org.kie.kogito.test;

import org.kie.api.runtime.process.ProcessInstance;
import org.kie.kogito.event.impl.DefaultEventMarshaller;
import org.kie.kogito.events.knative.ce.decorators.MessageDecorator;
import org.kie.kogito.events.knative.ce.decorators.MessageDecoratorFactory;
import org.kie.kogito.services.event.DataEventAttrBuilder;
import org.kie.kogito.services.event.EventMarshaller;
import java.util.Optional;

@javax.enterprise.context.ApplicationScoped()
public class TravelersMessageProducer_7 {

    @javax.inject.Inject()
    @org.eclipse.microprofile.reactive.messaging.Channel("processedtravellers")
    org.eclipse.microprofile.reactive.messaging.Emitter<String> emitter;

    @org.eclipse.microprofile.config.inject.ConfigProperty(name = "kogito.messaging.as-cloudevents")
    Optional<Boolean> useCloudEvents = Optional.of(true);

    Optional<MessageDecorator> decorator = MessageDecoratorFactory.newInstance();

    EventMarshaller marshaller = new DefaultEventMarshaller();

    @javax.annotation.PostConstruct()
    public void configure() {
    }

    public void produce(ProcessInstance pi, org.acme.travel.Traveller eventData) {
        if (decorator.isPresent()) {
            emitter.send(decorator.get().decorate(this.marshall(pi, eventData)));
        } else {
            emitter.send(this.marshall(pi, eventData));
        }
    }

    private String marshall(ProcessInstance pi, org.acme.travel.Traveller eventData) {
        return marshaller.marshall(eventData, e -> new TravelersMessageDataEvent_7(DataEventAttrBuilder.toType("processedtravellers", pi), DataEventAttrBuilder.toSource(pi), e, pi.getId(), pi.getParentProcessInstanceId(), pi.getRootProcessInstanceId(), pi.getProcessId(), pi.getRootProcessId(), String.valueOf(pi.getState()), pi.getReferenceId()), useCloudEvents);
    }
}
