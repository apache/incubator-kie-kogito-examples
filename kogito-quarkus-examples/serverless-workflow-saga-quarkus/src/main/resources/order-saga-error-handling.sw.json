{
  "id": "order_saga_error_workflow",
  "version": "1.0",
  "name": "Order Fulfilment Workflow Saga example",
  "description": "An example of how to implement Saga for the Order Fulfilment example using Error Handling and Compensation",
  "errors" : [
    {
      "name" : "reserve stock failed",
      "code": "org.kie.kogito.ServiceException"
    },
    {
      "name": "process payment failed",
      "code": "org.kie.kogito.ServiceException"
    },
    {
      "name": "shipping failed",
      "code": "org.kie.kogito.ServiceException"
    }
    
  ],
  "start": "reserveStock",
  "functions": [
    {
      "name": "reserveStock",
      "type": "custom",
      "operation": "service:org.kie.kogito.StockService::reserveStock"
    },
    {
      "name": "cancelStock",
       "type": "custom",
      "operation": "service:org.kie.kogito.StockService::cancelStock"
    },
    {
      "name": "processPayment",
      "type": "custom",
      "operation": "service:org.kie.kogito.PaymentService::processPayment"
    },
    {
      "name": "cancelPayment",
      "type": "custom",
      "operation": "service:org.kie.kogito.PaymentService::cancelPayment"
    },
    {
      "name": "scheduleShipping",
      "type": "custom",
      "operation": "service:org.kie.kogito.ShippingService::scheduleShipping"
    },
    {
      "name": "cancelShipping",
      "type": "custom",
      "operation": "service:org.kie.kogito.ShippingService::cancelShipping"
    },
    {
      "name": "orderSuccess",
      "type": "custom",
      "operation": "service:org.kie.kogito.OrderService::success"
    },
    {
      "name": "orderFailure",
      "type": "custom",
      "operation": "service:org.kie.kogito.OrderService::failure"
    },
    {
      "name": "log",
      "type": "custom",
      "operation": "sysout"
    }
  ],
  "states": [
    {
      "name": "reserveStock",
      "type": "operation",
      "actions": [
        {
          "name": "reserveStockAction",
          "functionRef": {
            "refName": "reserveStock",
            "arguments": {
              "orderId": ".orderId",
              "failService": ".failService"
            }
          },
          "actionDataFilter": {
            "results": ".",
            "toStateData": ".stockResponse"
          }
        }
      ],
      "transition": "processPayment",
      "compensatedBy": "CancelStock",
      "onErrors": [
        {
          "errorRef": "reserve stock failed",
          "transition": "ServiceError"
        }
      ]
    },
    {
      "name": "processPayment",
      "type": "operation",
      "actions": [
        {
          "name": "processPaymentAction",
          "functionRef": {
            "refName": "processPayment",
            "arguments": {
              "orderId": ".orderId",
              "failService": ".failService"
            }
          },
          "actionDataFilter": {
            "results": ".",
            "toStateData": ".paymentResponse"
          }
        }
      ],
      "transition": "scheduleShipping",
      "compensatedBy": "CancelPayment",
      "onErrors": [
        {
          "errorRef": "process payment failed",
          "transition": "ServiceError"
        }
      ]
    },
    {
      "name": "scheduleShipping",
      "type": "operation",
      "actions": [
        {
          "name": "scheduleShippingAction",
          "functionRef": {
            "refName": "scheduleShipping",
            "arguments": {
              "orderId": ".orderId",
              "failService": ".failService"
            }
          },
          "actionDataFilter": {
            "results": ".",
            "toStateData": ".shippingResponse"
          }
        }
      ],
      "transition": "CompleteOrder",
      "compensatedBy": "CancelShipping",
      "onErrors": [
        {
          "errorRef": "shipping failed",
          "transition": "ServiceError"
        }
      ]
    },
    {
      "name": "ServiceError",
      "type": "inject",
      "data": {},
      "transition": {
        "nextState": "FailedOrder",
        "compensate": true
      }
    },
    {
      "name": "CancelStock",
      "usedForCompensation": true,
      "type": "operation",
      "actions": [
        {
          "name": "cancelStockAction",
          "functionRef": {
            "refName": "cancelStock",
            "arguments": {
              "stockId": ".stockResponse.resourceId"
            }
          },
          "actionDataFilter": {
            "results": ".",
            "toStateData": ".cancelStockResponse"
          }
        }
      ]
    },
    {
      "name": "CancelPayment",
      "usedForCompensation": true,
      "type": "operation",
      "actions": [
        {
          "name": "cancelPaymentAction",
          "functionRef": {
            "refName": "cancelPayment",
            "arguments": {
              "paymentId": ".paymentResponse.resourceId"
            }
          },
          "actionDataFilter": {
            "results": ".",
            "toStateData": ".cancelPaymentResponse"
          }
        }
      ]
    },
    {
      "name": "CancelShipping",
      "usedForCompensation": true,
      "type": "operation",
      "actions": [
        {
          "name": "cancelShippingAction",
          "functionRef": {
            "refName": "cancelShipping",
            "arguments": {
              "shippingId": ".shippingResponse.resourceId"
            }
          },
          "actionDataFilter": {
            "results": ".",
            "toStateData": ".cancelShippingResponse"
          }
        }
      ]
    },
    {
      "name": "FailedOrder",
      "type": "operation",
      "actions": [
        {
          "name": "orderFailureAction",
          "functionRef": {
            "refName": "orderFailure",
            "arguments": {
              "orderId": ".orderId"
            }
          },
          "actionDataFilter": {
            "results": ".",
            "toStateData": ".orderResponse"
          }
        }
      ],
      "end": {
        "terminate": "true"
      }
    },
    {
      "name": "CompleteOrder",
      "type": "operation",
      "actions": [
        {
          "name": "orderSuccessAction",
          "functionRef": {
            "refName": "orderSuccess",
            "arguments": {
              "orderId": ".orderId"
            }
          },
          "actionDataFilter": {
            "results": ".",
            "toStateData": ".orderResponse"
          }
        }
      ],
      "end": {
        "terminate": "true"
      }
    }
  ]
}