apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tryout-kogito-app.fullname" . }}
  labels:
    {{- include "tryout-kogito-app.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "tryout-kogito-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "tryout-kogito-app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tryout-kogito-app.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ required "A valid .Values.image.repository entry required!" .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: GENERAL_NS
              valueFrom:
                configMapKeyRef:
                  name: kogito-configs
                  key: general.namespace
            - name: GENERAL_CLUSTERHOST
              valueFrom:
                configMapKeyRef:
                  name: kogito-configs
                  key: general.appsclusterhost
            - name: KOGITO_SERVICE_URL
              value: "http://{{ include "tryout-kogito-app.fullname" . }}-$(GENERAL_NS).$(GENERAL_CLUSTERHOST)"
            - name: KAFKA_BOOTSTRAP_SERVERS
              valueFrom:
                configMapKeyRef:
                  name: kogito-configs
                  key: kafka.bootstrap.servers
            - name: KOGITO_DATAINDEX_HTTP_URL
              valueFrom:
                configMapKeyRef:
                  name: kogito-configs
                  key: kogito.dataindex.httpurl
            - name: KOGITO_DATAINDEX_WS_URL
              valueFrom:
                configMapKeyRef:
                  name: kogito-configs
                  key: kogito.dataindex.wsurl
            - name: QUARKUS_INFINISPAN_CLIENT_HOSTS
              valueFrom:
                configMapKeyRef:
                  name: kogito-configs
                  key: quarkus.infinispan.client.hosts
            - name: QUARKUS_INFINISPAN_CLIENT_USE_AUTH
              value: 'true'
            - name: QUARKUS_INFINISPAN_CLIENT_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: kogito-configs
                  key: quarkus.infinispan.client.username
            - name: QUARKUS_INFINISPAN_CLIENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: infinispan-generated-secret
                  key: password
          ports:
            - name: http
              containerPort: {{ .Values.applicationPort }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
