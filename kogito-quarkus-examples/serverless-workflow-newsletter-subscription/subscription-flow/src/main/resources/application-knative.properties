# Build the application with the persistence profile to use a PostgreSQL database.
# Kogito persistence configurations for enabling the serverless workflow persistence
quarkus.datasource.db-kind=postgresql
kogito.persistence.type=jdbc
kogito.persistence.proto.marshaller=false
kogito.persistence.auto.ddl=true
kogito.persistence.query.timeout.millis=10000
enable.resource.postgresql=true

# DB configuration, also used by the PostgreSqlQueryRecordRepository
# This env var will be generated with the quarkus-kubernetes plugin. See below.
quarkus.datasource.reactive.url=postgresql://${POSTGRES_HOST:localhost}:5432/postgres
quarkus.datasource.username=postgres
quarkus.datasource.password=pass

## Knative integration
# this enables Knative to fetch the image information on Minikube.
# you can change this property with -Pknative -Dquarkus.container-image.group from the command line.
quarkus.container-image.group=dev.local
quarkus.kubernetes.deployment-target=knative
quarkus.knative.name=subscription-flow
quarkus.knative.image-pull-policy=IfNotPresent
quarkus.knative.env.vars.postgres_host=newsletter-postgres
# If you followed the installation guide using Minikube and the Knative Quickstart, you won't have to change this property
# We are pointing directly to the internal service managed by Knative since our other service is also a ksvc :)
quarkus.knative.env.vars.subscription_api_url=http://subscription-service.newsletter-showcase.svc.cluster.local

# Kogito Knative integration
# We opt to use the Knative objects instead of the Kogito Source
org.kie.kogito.addons.knative.eventing.generate-kogito-source=false
