#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

mp.messaging.incoming.wait.connector=smallrye-kafka
mp.messaging.incoming.wait.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.wait.group.id=kogito-sw-callback
mp.messaging.incoming.wait.auto.offset.reset=earliest

mp.messaging.outgoing.out-wait.connector=smallrye-kafka
mp.messaging.outgoing.out-wait.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.out-wait.topic=wait
mp.messaging.outgoing.out-wait.group.id=kogito-sw-callback
mp.messaging.outgoing.out-wait.auto.offset.reset=earliest

mp.messaging.incoming.in-resume.connector=smallrye-kafka
mp.messaging.incoming.in-resume.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.in-resume.topic=resume
mp.messaging.incoming.in-resume.group.id=kogito-sw-callback
mp.messaging.incoming.in-resume.auto.offset.reset=earliest

mp.messaging.outgoing.resume.connector=smallrye-kafka
mp.messaging.outgoing.resume.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.resume.group.id=kogito-sw-callback
mp.messaging.outgoing.resume.auto.offset.reset=earliest

## metadata
mp.messaging.outgoing.kogito-processinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-processinstances-events.topic=kogito-processinstances-events
mp.messaging.outgoing.kogito-processinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.kogito-usertaskinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-usertaskinstances-events.topic=kogito-usertaskinstances-events
mp.messaging.outgoing.kogito-usertaskinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.kogito-variables-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-variables-events.topic=kogito-variables-events
mp.messaging.outgoing.kogito-variables-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer


mp.messaging.outgoing.kogito-processdefinitions-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-processdefinitions-events.topic=kogito-processdefinitions-events
mp.messaging.outgoing.kogito-processdefinitions-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer


kogito.persistence.type=jdbc
quarkus.datasource.db-kind=postgresql
kogito.persistence.proto.marshaller=false

#run create tables scripts
kie.flyway.enabled=true

quarkus.native.native-image-xmx=8g

# profile to pack this example into a container, to use it execute activate the maven container profile, -Dcontainer
%container.quarkus.container-image.build=true
%container.quarkus.container-image.push=false
%container.quarkus.container-image.group=${USER}
%container.quarkus.container-image.registry=dev.local
%container.quarkus.container-image.tag=1.0-SNAPSHOT



