# Packaging
# quarkus.package.type=fast-jar
quarkus.http.test-port=0
quarkus.swagger-ui.always-include=true
quarkus.log.category."org.acme".level=DEBUG
kogito.sw.functions.StoreNewPatient.host=localhost
kogito.sw.functions.StoreNewPatient.port=${quarkus.http.port:8080}
kogito.sw.functions.AssignDoctorToPatient.host=localhost
kogito.sw.functions.AssignDoctorToPatient.port=${quarkus.http.port:8080}
kogito.sw.functions.SchedulePatientAppointment.host=localhost
kogito.sw.functions.SchedulePatientAppointment.port=${quarkus.http.port:8080}

mp.messaging.incoming.kogito_incoming_stream.connector=quarkus-http
mp.messaging.incoming.kogito_incoming_stream.path=/

# The K_SINK variable will be injected for us by the KogitoSource
mp.messaging.outgoing.kogito_outgoing_stream.url=${K_SINK:http://localhost:8181}

# this enables Knative to fetch the image information on Minikube.
# you can change this property with -Pknative -Dquarkus.container-image.group from the command line.
%knative.quarkus.container-image.group=dev.local
%knative.quarkus.kubernetes.deployment-target=knative
quarkus.knative.image-pull-policy=IfNotPresent

# Kogito Knative integration
org.kie.kogito.addons.knative.eventing.generate-kogito-source=true

# profile to pack this example into a container, to use it execute activate the maven container profile, -Dcontainer
%container.quarkus.container-image.build=true
%container.quarkus.container-image.push=false
%container.quarkus.container-image.group=${USER}
%container.quarkus.container-image.registry=dev.local
%container.quarkus.container-image.tag=1.0-SNAPSHOT
%container.quarkus.jib.jvm-entrypoint=/home/kogito/kogito-app-launch.sh
%container.quarkus.jib.base-jvm-image=quay.io/kiegroup/kogito-runtime-jvm:latest
%container.quarkus.jib.working-directory=/home/kogito/bin
