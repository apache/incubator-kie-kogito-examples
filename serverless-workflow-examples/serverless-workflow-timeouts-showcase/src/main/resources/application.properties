quarkus.http.port=8080

kogito.service.url=http://localhost:${quarkus.http.port}

quarkus.kogito.devservices.enabled=false

quarkus.swagger-ui.always-include=true

# Configuration for the incoming cloud events received by the serverless workflows.
mp.messaging.incoming.kogito_incoming_stream.connector=quarkus-http
mp.messaging.incoming.kogito_incoming_stream.path=/
mp.messaging.incoming.kogito_incoming_stream.method=POST

# Configuration for the helper class EventsProducerResource that send events to the waiting serverless workflows.
mp.messaging.outgoing.response_events.connector=quarkus-http
mp.messaging.outgoing.response_events.url=${K_SINK:${kogito.service.url}}
mp.messaging.outgoing.response_events.method=POST

# profile to pack this example into a container, to use it execute activate the maven container profile, -Dcontainer
%container.quarkus.container-image.build=true
%container.quarkus.container-image.push=false
%container.quarkus.container-image.group=${USER}
%container.quarkus.container-image.registry=dev.local
%container.quarkus.container-image.tag=1.0-SNAPSHOT
%container.quarkus.jib.jvm-entrypoint=/home/kogito/kogito-app-launch.sh
%container.quarkus.jib.base-jvm-image=quay.io/kiegroup/kogito-runtime-jvm:latest
%container.quarkus.jib.working-directory=/home/kogito/bin