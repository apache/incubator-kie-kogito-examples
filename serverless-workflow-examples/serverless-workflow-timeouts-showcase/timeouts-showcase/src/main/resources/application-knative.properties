# Kogito persistence configurations for enabling the serverless workflow persistence
quarkus.datasource.db-kind=postgresql
kogito.persistence.type=jdbc
kogito.persistence.proto.marshaller=false
kogito.persistence.auto.ddl=true
kogito.persistence.query.timeout.millis=10000
enable.resource.postgresql=true

# This env var will be generated with the quarkus-kubernetes plugin. See below.
quarkus.datasource.jdbc.url=jdbc:postgresql://${POSTGRES_HOST:localhost}:5432/postgres
quarkus.datasource.username=postgres
quarkus.datasource.password=pass

# TODO use the service discovery extension and set kogito.service.url=knative:timeouts-showcase
# Cluster local URL is fine by now since the Job -> Runtime execution occurs withing the cluster.
kogito.service.url=http://timeouts-showcase.default.svc.cluster.local

# Events produced by kogito-addons-quarkus-jobs-knative-eventing to program the timers on the jobs service.
mp.messaging.outgoing.kogito-job-service-job-request-events.connector=quarkus-http
mp.messaging.outgoing.kogito-job-service-job-request-events.url=${K_SINK:http://localhost:8280/jobs/events}
mp.messaging.outgoing.kogito-job-service-job-request-events.method=POST

# This enables Knative to fetch the image information on Minikube.
# You can change this property with -Pknative -Dquarkus.container-image.group from the command line.
quarkus.container-image.group=dev.local
quarkus.kubernetes.deployment-target=knative
quarkus.kubernetes.namespace=default
quarkus.knative.image-pull-policy=IfNotPresent
quarkus.knative.env.vars.postgres_host=timeouts-showcase-database

# Naive configuration to facilitate the inspection of the log traces produced by the processes, however you can change
# this values to any valid configuration.
quarkus.knative.min-scale=1
quarkus.knative.max-scale=1