# When the application is generated with the knative profile, it'll require a PostgreSQL database.

# Enable the PostgreSqlSubscriptionRepository component.
enable.resource.postgresql=true

## DB configuration:
quarkus.datasource.db-kind=postgresql

# The POSTGRES_HOST env var will be generated by quarkus-kubernetes plugin. See below.
quarkus.datasource.reactive.url=postgresql://${POSTGRES_HOST:localhost}:5432/postgres
quarkus.datasource.username=postgres
# The POSTGRES_PASSWORD env var will be generated by the quarkus-kubernetes plugin. See below.
quarkus.datasource.password=${POSTGRES_PASSWORD:pass}

## Knative integration:

# Configure current deployment to set an env var with name POSTGRES_HOST
# For more information see: https://quarkus.io/guides/deploying-to-kubernetes#environment-variables-from-keyvalue-pairs
quarkus.knative.env.vars.postgres_host=newsletter-postgres

# Configure current deployment to be linked with the kubernetes secret newsletter-postgres, and to set an env
# var POSTGRES_PASSWORD that will get it's value form the secret entry with key postgrespass.
# For more information see: https://quarkus.io/guides/deploying-to-kubernetes#secret-mapping
#quarkus.knative.env.secrets=newsletter-postgres
#quarkus.knative.env.mapping.postgres_password.from-secret=newsletter-postgres
#quarkus.knative.env.mapping.postgres_password.with-key=postgrespass

# This configuration enables Knative to fetch the image information on Minikube.
# you can change this property with -Pknative -Dquarkus.container-image.group from the command line.
quarkus.container-image.group=dev.local
quarkus.kubernetes.deployment-target=knative
quarkus.knative.name=subscription-service
quarkus.knative.image-pull-policy=IfNotPresent
