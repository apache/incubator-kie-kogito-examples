---
  - name: Start CRC and deploy Kogito Operator and CLI
    hosts: localhost

    vars:
      kogito_tag: "0.10.0"
      ram: "16384" #MB
      libvirt_version: "4.4.3"
      ip_on_etc_hosts: 192.168.130.11
      kube_password: "{{ lookup('file', '/home/{{ ansible_user_id }}/.crc/cache/crc_libvirt_{{ libvirt_version }}/kubeadmin-password') }}"
      kogito_url_file: "https://github.com/kiegroup/kogito-cloud-operator/releases/download/{{ kogito_tag }}/kogito-cli-{{ kogito_tag }}-linux-amd64.tar.gz"
      kogito_tmp_dest: "/tmp/kogito-{{ kogito_tag }}-linux-amd64.tar.gz"

    vars_prompt:
      - name: "nameSpace"
        default: "my-kogito-project"
        prompt: "Insert your Project Name/ NameSpace"
        private: "no"
      - name: "PullSecret"
        prompt: "Insert your Pull secret"

    tasks:
      - debug: msg="Project Name {{ nameSpace }}"

      - name: Check that kogito cli exists in /home/{{ansible_user_id}}/.local/bin/
        stat:
          path: "/home/{{ ansible_user_id }}/.local/bin/kogito"
        register: stat_result

      - name: Copy Kogito cli
        get_url:
          url: "{{kogito_url_file}}"
          dest: "{{ kogito_tmp_dest }}"
        when: stat_result.stat.exists == False

      - name: Extract Kogito cli archive
        unarchive:
          src: "{{ kogito_tmp_dest }}"
          dest: "/tmp/"
        when: stat_result.stat.exists == False

      - name: Creates user home kogito dir
        file:
          path: "/home/{{ ansible_user_id}}/.local/bin/"
          state: directory
        when: stat_result.stat.exists == False

      - name: Move kogito from /tmp to /home/{{ansible_user_id}}/.local/bin
        command: "mv /tmp/kogito /home/{{ansible_user_id}}/.local/bin/"
        when: stat_result.stat.exists == False

      - name: CRC setup
        shell: "crc setup"
        register: crc_result

      - debug: msg="{{ crc_result }}"

      - name: Write pull secret
        copy:
          content: "{{ PullSecret }}"
          dest: "~/.crc/crc-pull-secret"

      - name: Copy Kogito Examples pom
        copy:
          src: "./../pom.xml"
          dest: "/tmp/examples_pom.xml"

      - name: "Get Kogito Examples "
        shell: xmllint --xpath '/*[local-name()="project"]/*[local-name()="modules"]' /tmp/examples_pom.xml > ~/.crc/quarkus_examples.txt

      - name: Replace modules tags
        replace:
          path: ~/.crc/quarkus_examples.txt
          regexp: '<modules>'
          replace: ''

      - name: Replace module tags
        replace:
          path: ~/.crc/quarkus_examples.txt
          regexp: '<module>'
          replace: '- '

      - name: Replace end module tags
        replace:
          path: ~/.crc/quarkus_examples.txt
          regexp: '</module>'
          replace: ''

      - name: Replace end modules tags
        replace:
          path: ~/.crc/quarkus_examples.txt
          regexp: '</modules>'
          replace: '\n'

      - name: Start CRC with {{ ram }}MB (~ 10 minutes)
        shell: "crc start -m {{ ram }} -p ~/.crc/crc-pull-secret"

      - name: Login crc
        shell: "oc login -u kubeadmin -p {{ kube_password }} https://api.crc.testing:6443"

      - name: Create {{ nameSpace }}
        shell: "oc new-project {{ nameSpace }}"

      - name: Use {{ nameSpace }} proect
        shell: "oc project {{ nameSpace }}"

      - name: Kogito use {{ nameSpace }}
        shell: "kogito use-project {{ nameSpace }}"
        register: kogito_use_project_result
        ignore_errors: yes

      - debug: msg="{{ kogito_use_project_result }}"

      - name: Kogito install operator on {{ nameSpace }}
        shell: "kogito install operator -p {{ nameSpace }}"
        register: kogito_install_operator_result

      - name: Check AvailableReplica on Kogito operator first on {{ nameSpace }}
        shell: "kubectl get pods --selector=name=kogito-operator -o jsonpath='{.items[*].status.phase}'"
        register: result_one

      - debug: msg="{{ result_one }}"

      - name: Check AvailableReplica on Kogito operator first on {{ nameSpace }} wait for up to 120 sec, poll every 10 sec, 12 times
        shell: "kubectl get pods --selector=name=kogito-operator -o jsonpath='{.items[*].status.phase}'"
        register: result
        until: result.stdout.find("Running") != -1
        async: 120
        poll: 10
        retries: 12

      - debug: msg="Project Name {{ nameSpace }}"

      - debug: msg="Your Kube Password is {{ kube_password }}"