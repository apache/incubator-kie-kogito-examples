@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

droolsRepo = 'drools'
kogitoRuntimesRepo = 'kogito-runtimes'
kogitoExamplesRepo = 'kogito-examples'

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem24g && !master'
    }
    tools {
        maven env.BUILD_MAVEN_TOOL
        jdk env.BUILD_JDK_TOOL
    }
    options {
        timestamps()
        timeout(time: 720, unit: 'MINUTES')
    }
    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
        MAVEN_OPTS = '-Xms1024m -Xmx6g -XX:PermSize=128m -XX:MaxPermSize=512m'
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    checkoutDroolsRepo()
                    checkoutKogitoRepo(kogitoRuntimesRepo)
                    checkoutKogitoRepo(kogitoExamplesRepo)
                }
            }
        }
        stage('Build Drools') {
            steps {
                script {
                    runQuickBuild(droolsRepo)
                }
            }
        }
        stage('Build Runtimes') {
            steps {
                script {
                    runQuickBuild(kogitoRuntimesRepo)
                }
            }
        }
        stage('Examples Integration Tests') {
            steps {
                script {
                    runIntegrationTests(kogitoExamplesRepo)
                }
            }
        }
        stage('Examples Integration Tests with persistence') {
            when {
                expression { return !isPersistenceDisabled() }
            }
            steps {
                script {
                    runIntegrationTests(kogitoExamplesRepo, ['persistence'])
                }
            }
        }
        stage('Examples Integration Tests with events') {
            when {
                expression { return !isEventsDisabled() }
            }
            steps {
                script {
                    runIntegrationTests(kogitoExamplesRepo, ['events'])
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        always {
            script {
                junit '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml'
            }
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}

void sendNotification() {
    mailer.sendMarkdownTestSummaryNotification("${NOTIFICATION_JOB_NAME}", "[${params.BUILD_BRANCH_NAME}] Kogito Examples", [env.KOGITO_CI_EMAIL_TO])
}

void checkoutKogitoRepo(String repo, String dirName=repo) {
    dir(dirName) {
        checkout(githubscm.resolveRepository(repo, params.GIT_AUTHOR, getKogitoTargetBranch(), false))
    }
}

void checkoutDroolsRepo() {
    dir(droolsRepo) {
        checkout(githubscm.resolveRepository(droolsRepo, params.GIT_AUTHOR, getDroolsTargetBranch(), false))
    }
}

String getKogitoTargetBranch() {
    return getTargetBranch(0)
}

String getDroolsTargetBranch() {
    return getTargetBranch(7)
}

String getTargetBranch(Integer addToMajor) {
    String targetBranch = params.BUILD_BRANCH_NAME
    String [] versionSplit = targetBranch.split("\\.")
    if (versionSplit.length == 3
        && versionSplit[0].isNumber()
        && versionSplit[1].isNumber()
        && versionSplit[2] == 'x') {
        targetBranch = "${Integer.parseInt(versionSplit[0]) + addToMajor}.${versionSplit[1]}.x"
    } else {
        echo "Cannot parse targetBranch as release branch so going further with current value: ${targetBranch}"
        }
    return targetBranch
}

void runQuickBuild(String project) {
    getMavenCommand(project)
            .withProperty('quickly')
            .run('clean install')
}

void runIntegrationTests(String project, List profiles=[]) {
    String profileSuffix = profiles ? "-${profiles.join('-')}" : ''
    String itFolder = "${project}-it${profileSuffix}"
    sh "cp -r ${project} ${itFolder}"

    runMavenTests(getNativeMavenCommand(itFolder).withProfiles(profiles), 'verify')
}

void runMavenTests(MavenCommand mvnCmd, String mvnRunCmd) {
    try {
        mvnCmd.withProperty('maven.test.failure.ignore', true).run(mvnRunCmd)
    } catch (err) {
        util.archiveConsoleLog()
        throw err
    } finally {
        saveReports()
        cleanContainers()
    }
}

MavenCommand getMavenCommand(String directory) {
    return new MavenCommand(this, ['-fae', '-ntp'])
                .withSettingsXmlId('kogito_release_settings')
                .withProperty('java.net.preferIPv4Stack', true)
                .inDirectory(directory)
}

MavenCommand getNativeMavenCommand(String directory, String builderImage = getNativeBuilderImage()) {
    def mvnCmd = getMavenCommand(directory)
                .withProfiles(['native'])
                .withProperty('quarkus.native.container-build', true)
                .withProperty('quarkus.native.container-runtime', 'docker')
                .withProperty('quarkus.profile', 'native') // Added due to https://github.com/quarkusio/quarkus/issues/13341
    
    if (builderImage) {
        mvnCmd.withProperty('quarkus.native.builder-image', builderImage)
    }

    return mvnCmd
}

void cleanContainers() {
    cloud.cleanContainersAndImages('docker')
}

void saveReports() {
    junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: true
}

String getNativeBuilderImage() {
    return env.NATIVE_BUILDER_IMAGE
}

boolean isPersistenceDisabled() {
    return env.DISABLE_PERSISTENCE ? env.DISABLE_PERSISTENCE.toBoolean() : false
}

boolean isEventsDisabled() {
    return env.DISABLE_EVENTS ? env.DISABLE_EVENTS.toBoolean() : false
}