import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

examplesHelper = null

droolsRepo = 'drools'
kogitoRuntimesRepo = 'kogito-runtimes'
kogitoAppsRepo = 'kogito-apps'

pipeline {
    agent {
        label 'kie-rhel8 && !built-in'
    }

    tools {
        maven env.BUILD_MAVEN_TOOL
        jdk env.BUILD_JDK_TOOL
    }

    options {
        timestamps()
        timeout(time: 60, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        // Keep here for visitibility
        MAVEN_OPTS = '-Xms1024m -Xmx4g'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanWs()

                    checkout scm
                    examplesHelper = load '.ci/jenkins/helper_scripts/examples.groovy'

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    checkoutRepo(droolsRepo, getDroolsTargetBranch())
                    checkoutRepo(kogitoRuntimesRepo, getBuildBranch())
                    checkoutRepo(kogitoAppsRepo, getBuildBranch())
                    checkoutRepo(getRepoName(), getBuildBranch())
                }
            }
        }
        stage('Build Drools') {
            steps {
                script {
                    getMavenCommand(droolsRepo)
                        .withProperty('quickly')
                        .run('clean install')
                }
            }
        }
        stage('Build Kogito Runtimes') {
            steps {
                script {
                    getMavenCommand(kogitoRuntimesRepo)
                        .withProperty('quickly')
                        .run('clean install')
                }
            }
        }
        stage('Build Kogito Apps') {
            steps {
                script {
                    getMavenCommand(kogitoAppsRepo)
                        .withProperty('quickly')
                        .run('clean install')
                }
            }
        }
        stage('Update project version') {
            steps {
                script {
                    dir(getRepoName()) {
                        def oldKogitoVersion = readMavenPom(file: 'pom.xml').version
                        echo "Got old Kogito version ${oldKogitoVersion}"

                        maven.mvnVersionsUpdateParentAndChildModules(getMavenCommand(), getKogitoVersion(), true)
                        maven.mvnSetVersionProperty(getMavenCommand(), 'version.org.kie.kogito', getKogitoVersion())
                        maven.mvnSetVersionProperty(getMavenCommand(), 'kogito.bom.version', getKogitoVersion())
                        maven.mvnSetVersionProperty(getMavenCommand(), 'version.org.drools', getDroolsVersion())

                        if (getKogitoVersion() != oldKogitoVersion) {
                            def status = sh(script: "grep -ir '${oldKogitoVersion}' --include='pom.xml'", returnStatus: true)
                            if (status == 0) {
                                error "Old Kogito version ${oldKogitoVersion} is still present into the project... Please review it..."
                            }
                        }
                    }
                }
            }
        }
        stage('Update images\' version') {
            when {
                expression { !isMainBranch() }
            }
            steps {
                script {
                    String[] versionSplit = getKogitoVersion().split("\\.")
                    String reducedTag = "${versionSplit[0]}.${versionSplit[1]}"
                    sh """
                        grep -r -l --exclude-dir=.ci 'quay.io/kiegroup' | xargs -I{} sed -i 's|quay.io/kiegroup/\\(.*\\):.*|quay.io/kiegroup/\\1:${reducedTag}|g' {}
                    """
                }
            }
        }
        stage('Update branch') {
            steps {
                script {
                    dir(getRepoName()) {
                        if (githubscm.isThereAnyChanges()) {
                            def commitMsg = "Update version to Kogito ${getKogitoVersion()} / Drools ${getDroolsVersion()}"

                            githubscm.commitChanges(commitMsg)
                            githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())
                        } else {
                            println '[WARN] no changes to commit'
                        }
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Setup branch', "[${getBuildBranch()}] Kogito Examples", [env.KOGITO_CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

void checkoutRepo(String repository, String branch) {
    dir(repository) {
        deleteDir()
        checkout(githubscm.resolveRepository(repository, getGitAuthor(), branch, false))
        // need to manually checkout branch since on a detached branch after checkout command
        sh "git checkout ${branch}"
    }
}

String getDroolsTargetBranch() {
    return util.calculateTargetReleaseBranch(getBuildBranch(), 7)
}

String getRepoName() {
    return env.REPO_NAME
}

String getGitAuthor() {
    // GIT_AUTHOR can be env or param
    return "${GIT_AUTHOR}"
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getKogitoVersion() {
    return params.KOGITO_VERSION
}

String getDroolsVersion() {
    return params.DROOLS_VERSION
}

String getGitAuthorCredsID() {
    return env.AUTHOR_CREDS_ID
}

MavenCommand getMavenCommand(String directory = '') {
    def mvnCmd = new MavenCommand(this, ['-fae', '-ntp'])
                .withSettingsXmlId(env.MAVEN_SETTINGS_CONFIG_FILE_ID)
    if (directory) {
        mvnCmd.inDirectory(directory)
    }
    return mvnCmd
}


boolean isMainBranch() {
    return env.IS_MAIN_BRANCH ? env.IS_MAIN_BRANCH.toBoolean() : false
}
