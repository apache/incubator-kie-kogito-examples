@Library('jenkins-pipeline-shared-libraries')_

import org.kie.jenkins.MavenCommand

droolsRepo = 'drools'
kogitoRuntimesRepo = 'kogito-runtimes'
kogitoAppsRepo = 'kogito-apps'
kogitoExamplesRepo = 'kogito-examples'

pipeline {
    agent {
        label 'kie-rhel7 && kie-mem16g && !built-in'
    }
    tools {
        maven env.BUILD_MAVEN_TOOL
        jdk env.BUILD_JDK_TOOL
    }
    options {
        timestamps()
        timeout(time: 360, unit: 'MINUTES')
    }
    environment {
        // QUARKUS_BRANCH should be defined directly into the job environment

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
        MAVEN_OPTS = '-Xms1024m -Xmx6g -XX:PermSize=128m -XX:MaxPermSize=512m'
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    checkoutDroolsRepo()
                    checkoutKogitoRepo(kogitoRuntimesRepo)
                    checkoutKogitoRepo(kogitoAppsRepo)
                    checkoutKogitoRepo(kogitoExamplesRepo)
                }
            }
        }

        stage('Setup integration branch') {
            when {
                expression { useIntegrationBranch() }
            }
            steps {
                script {
                    // Calculate integration branch
                    setIntegrationBranch("${getKogitoBranch()}-integration-quarkus-${getQuarkusBranch()}")
                    mergeOnIntegrationBranch(droolsRepo, getDroolsBranch())
                    mergeOnIntegrationBranch(kogitoRuntimesRepo, getKogitoBranch())
                    mergeOnIntegrationBranch(kogitoAppsRepo, getKogitoBranch())
                    mergeOnIntegrationBranch(kogitoExamplesRepo, getKogitoBranch(), true)
                }
            }
        }

        stage('Build quarkus') {
            when {
                expression { getQuarkusBranch() }
            }
            steps {
                script {
                    checkoutQuarkusRepo()
                    getBasicMavenCommand('quarkus')
                        .withProperty('quickly')
                        .run('clean install')

                    // Update downstream repositories dependencies
                    mavenCompareQuarkusDependencies(droolsRepo, 'drools-build-parent')
                    mavenSetProperty(droolsRepo, 'version.io.quarkus', '999-SNAPSHOT')
                    mavenCompareQuarkusDependencies(kogitoRuntimesRepo, 'kogito-dependencies-bom')
                    mavenCompareQuarkusDependencies(kogitoRuntimesRepo, 'kogito-build-parent')
                    mavenCompareQuarkusDependencies(kogitoRuntimesRepo, 'kogito-quarkus-bom')
                    mavenCompareQuarkusDependencies(kogitoRuntimesRepo, 'kogito-build-no-bom-parent')
                    mavenSetProperty(kogitoRuntimesRepo, 'version.io.quarkus', '999-SNAPSHOT')
                    mavenSetProperty(kogitoExamplesRepo, 'quarkus.platform.version', '999-SNAPSHOT')
                    mavenSetProperty(kogitoExamplesRepo, 'quarkus-plugin.version', '999-SNAPSHOT')
                }
            }
            post {
                always {
                    script {
                        cleanContainers()
                    }
                }
            }
        }

        stage('Build Drools') {
            steps {
                script {
                    getEcosystemMavenCommand(droolsRepo)
                        .withProperty('quickly')
                        .run('clean install')
                }
            }
            post {
                always {
                    script {
                        cleanContainers()
                    }
                }
            }
        }

        stage('Build Kogito Runtimes') {
            steps {
                script {
                    getEcosystemMavenCommand(kogitoRuntimesRepo)
                        .withProperty('quickly')
                        .run('clean install')
                }
            }
            post {
                always {
                    script {
                        cleanContainers()
                    }
                }
            }
        }

        stage('Build Kogito Apps') {
            steps {
                script {
                    getEcosystemMavenCommand(kogitoAppsRepo)
                        .withProperty('quickly')
                        .run('clean install')
                }
            }
            post {
                always {
                    script {
                        cleanContainers()
                    }
                }
            }
        }

        stage('Build Kogito Examples') {
            steps {
                script {
                    getFullMavenCommand(kogitoExamplesRepo)
                        .withProperty('maven.test.failure.ignore', true)
                        .run('clean install')
                }
            }
            post {
                always {
                    script {
                        cleanContainers()
                    }
                }
            }
        }

        stage('Build kogito-examples with persistence') {
            when {
                expression { return !isPersistenceDisabled() }
            }
            steps {
                script {
                    getFullMavenCommand(kogitoExamplesRepo)
                        .withProfiles(['persistence'])
                        .withProperty('maven.test.failure.ignore', true)
                        .run('clean verify')
                }
            }
            post {
                always {
                    script {
                        cleanContainers()
                    }
                }
            }
        }

        stage('Build kogito-examples with events') {
            when {
                expression { return !isEventsDisabled() }
            }
            steps {
                script {
                    getFullMavenCommand(kogitoExamplesRepo)
                        .withProfiles(['events'])
                        .withProperty('maven.test.failure.ignore', true)
                        .run('clean verify')
                }
            }
            post {
                always {
                    script {
                        cleanContainers()
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        always {
            script {
                junit testResults: '**/target/surefire-reports/**/*.xml, **/target/failsafe-reports/**/*.xml', allowEmptyResults: true
                util.archiveConsoleLog()
            }
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}

void sendNotification() {
    String additionalInfo = ''
    if (useIntegrationBranch()) {
        additionalInfo += """
If any changes need to be done, please perform them on branch **${getIntegrationBranch()}**
"""
    }
    additionalInfo = """
${getReproducer()}
"""
    mailer.sendMarkdownTestSummaryNotification("${NOTIFICATION_JOB_NAME}${useIntegrationBranch() ? ' - Integration' : ''}", "[${getKogitoBranch()}] Kogito Examples", [env.KOGITO_CI_EMAIL_TO], additionalInfo)
}

void checkoutKogitoRepo(String repo) {
    dir(repo) {
        deleteDir()
        checkout(githubscm.resolveRepository(repo, params.GIT_AUTHOR, getKogitoBranch(), false))
    }
}

void checkoutDroolsRepo() {
    dir(droolsRepo) {
        deleteDir()
        checkout(githubscm.resolveRepository(droolsRepo, params.GIT_AUTHOR, getDroolsBranch(), false))
    }
}

void checkoutQuarkusRepo() {
    dir('quarkus') {
        deleteDir()
        checkout(githubscm.resolveRepository('quarkus', 'quarkusio', getQuarkusBranch(), false))
    }
}

void mergeOnIntegrationBranch(String repoName, String baseBranch, boolean pushChanges = false) {
    echo "Merge changes for repository ${repoName} from ${baseBranch} to ${getIntegrationBranch()}"
    dir(repoName) {
        getOrCreateGitBranch(getIntegrationBranch())
        sh "git merge origin/${baseBranch} --no-ff"
        if (pushChanges) {
            githubscm.pushObject('origin', getIntegrationBranch(),  params.GIT_AUTHOR_CREDS_ID)
        }
    }
}

MavenCommand getBasicMavenCommand(String directory, boolean includeSettings = true) {
    def mvnCmd = new MavenCommand(this, ['-fae', '-ntp'])
                .inDirectory(directory)
    if (includeSettings) {
        mvnCmd.withSettingsXmlId('kogito_release_settings')
    }
    return mvnCmd
}

MavenCommand getEcosystemMavenCommand(String directory, boolean includeSettings = true) {
    def mvnCmd = getBasicMavenCommand(directory, includeSettings)

    if (env.BUILD_MVN_OPTS) {
        mvnCmd.withOptions([ env.BUILD_MVN_OPTS ])
    }

    return mvnCmd
}

MavenCommand getFullMavenCommand(String directory, boolean includeSettings = true) {
    def mvnCmd = getEcosystemMavenCommand(directory, includeSettings)
    if (isNative()) {
        mvnCmd.withProfiles(['native'])
                .withProperty('quarkus.native.container-build', true)
                .withProperty('quarkus.native.container-runtime', 'docker')
                .withProperty('quarkus.profile', 'native') // Added due to https://github.com/quarkusio/quarkus/issues/13341

        String builderImage = getNativeBuilderImage()
        if (builderImage) {
            mvnCmd.withProperty('quarkus.native.builder-image', builderImage)
        }
    }
    return mvnCmd
}

void mavenCompareQuarkusDependencies(String repo, String artifactId) {
    maven.mvnCompareDependencies(getBasicMavenCommand(repo), 'io.quarkus:quarkus-bom:999-SNAPSHOT', ":${artifactId}", true, true)
}

void mavenSetProperty(String repo, String property, String newVersion) {
    maven.mvnSetVersionProperty(getBasicMavenCommand(repo), property, newVersion)
}

void cleanContainers() {
    cloud.cleanContainersAndImages('docker')
}

boolean isNative() {
    return env.NATIVE ? env.NATIVE.toBoolean() : false
}

String getNativeBuilderImage() {
    return env.NATIVE_BUILDER_IMAGE
}

String getQuarkusBranch() {
    return env['QUARKUS_BRANCH'] ?: ''
}

boolean isPersistenceDisabled() {
    return env.DISABLE_PERSISTENCE ? env.DISABLE_PERSISTENCE.toBoolean() : false
}

boolean isEventsDisabled() {
    return env.DISABLE_EVENTS ? env.DISABLE_EVENTS.toBoolean() : false
}

String getKogitoBranch() {
    return params.BUILD_BRANCH_NAME
}

String getDroolsBranch() {
    return util.calculateTargetReleaseBranch(getKogitoBranch(), 7)
}

boolean useIntegrationBranch() {
    return env.USE_INTEGRATION_BRANCH ? env.USE_INTEGRATION_BRANCH.toBoolean() : false
}

void setIntegrationBranch(String branch) {
    echo "Set integration branch ${getIntegrationBranch()}"
    env.INTEGRATION_BRANCH = branch
}

String getIntegrationBranch() {
    return env.INTEGRATION_BRANCH
}

void getOrCreateGitBranch(String branch) {
    sh 'git fetch origin'
    String branchRemoteResult = sh(script: "git ls-remote origin ${branch} | wc -l", returnStdout: true).trim()
    if (Integer.parseInt(branchRemoteResult) > 0) {
        echo "Branch ${branch} already exist ... will not create it. Checking out !"
        sh "git checkout ${branch}"
    } else {
        echo "Branch ${branch} does not exist ... gonna create it"
        githubscm.createBranch(branch)
    }
}

String getReproducer() {
    String kogitoBranch = useIntegrationBranch() ? getIntegrationBranch() : getKogitoBranch()
    String droolsBranch = useIntegrationBranch() ? getIntegrationBranch() : getDroolsBranch()
    String reproducer = """
```spoiler Commands to reproduce
git clone --branch ${droolsBranch} --depth 1 https://github.com/kiegroup/${droolsRepo}.git
git clone --branch ${kogitoBranch} --depth 1 https://github.com/kiegroup/${kogitoRuntimesRepo}.git
git clone --branch ${kogitoBranch} --depth 1 https://github.com/kiegroup/${kogitoAppsRepo}.git
git clone --branch ${kogitoBranch} --depth 1 https://github.com/kiegroup/${kogitoExamplesRepo}.git
"""
    if (getQuarkusBranch()) {
        reproducer += """
cd quarkus && ${getBasicMavenCommand('quarkus', false).withProperty('quickly').getFullRunCommand('clean install')}
cd ../${droolsRepo}
mvn -pl :drools-build-parent versions:compare-dependencies -DremotePom=io.quarkus:quarkus-bom:999-SNAPSHOT -DupdatePropertyVersions=true -DupdateDependencies=true -DgenerateBackupPoms=false
mvn -e versions:set-property -Dproperty=version.io.quarkus -DnewVersion=999-SNAPSHOT -DallowSnapshots=true -DgenerateBackupPoms=false
cd ../${kogitoRuntimesRepo}
mvn -pl :kogito-dependencies-bom -pl :kogito-build-parent -pl :kogito-quarkus-bom -pl :kogito-build-no-bom-parent versions:compare-dependencies -DremotePom=io.quarkus:quarkus-bom:999-SNAPSHOT -DupdatePropertyVersions=true -DupdateDependencies=true -DgenerateBackupPoms=false
mvn -e versions:set-property -Dproperty=version.io.quarkus -DnewVersion=999-SNAPSHOT -DallowSnapshots=true -DgenerateBackupPoms=false
cd ../${kogitoExamplesRepo}
mvn -e versions:set-property -Dproperty=quarkus.platform.version -DnewVersion=999-SNAPSHOT -DallowSnapshots=true -DgenerateBackupPoms=false
mvn -e versions:set-property -Dproperty=quarkus-plugin.version -DnewVersion=999-SNAPSHOT -DallowSnapshots=true -DgenerateBackupPoms=false
"""
    }
    reproducer += """
cd ${droolsRepo}
${getEcosystemMavenCommand(droolsRepo, false).withProperty('quickly').getFullRunCommand('clean install')}
cd ../${kogitoRuntimesRepo}
${getEcosystemMavenCommand(kogitoRuntimesRepo, false).withProperty('quickly').getFullRunCommand('clean install')}
cd ../${kogitoAppsRepo}
${getEcosystemMavenCommand(kogitoAppsRepo, false).withProperty('quickly').getFullRunCommand('clean install')}
cd ../${kogitoExamplesRepo}
${getFullMavenCommand(kogitoExamplesRepo, false).withProperty('maven.test.failure.ignore', true).getFullRunCommand('clean install')}
"""
    if (!isPersistenceDisabled()) {
        reproducer += """
${getFullMavenCommand(kogitoExamplesRepo, false).withProfiles(['persistence']).withProperty('maven.test.failure.ignore', true).getFullRunCommand('clean install')}
"""
    }
    if (!isEventsDisabled()) {
        reproducer += """
${getFullMavenCommand(kogitoExamplesRepo, false).withProfiles(['events']).withProperty('maven.test.failure.ignore', true).getFullRunCommand('clean install')}
"""
    }
    reproducer += '```'
    return reproducer
}
