import org.jenkinsci.plugins.workflow.libs.Library
@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kie-rhel8 && !built-in'
    }

    tools {
        maven env.BUILD_MAVEN_TOOL
        jdk env.BUILD_JDK_TOOL
    }

    options {
        timestamps()
        timeout(time: 120, unit: 'MINUTES')
        disableConcurrentBuilds(abortPrevious: true)
    }

    environment {
        CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")
        GITHUB_CLI_VERSION = '0.11.1'
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    cleanWs()

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    // Verify version is set and if on right release branch
                    assert getProjectVersion()

                    assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())
                    
                    installGithubCLI()
                }
            }
        }
        stage('Reset stable branch') {
            steps {
                script {
                    String stableBranchName = 'stable'
                    dir(getRepoName()) {
                        checkoutTag(getRepoName(), getGitTag(), stableBranchName)
                        forcePushProtectedBranch(stableBranchName, 'main')
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                util.cleanNode('docker')
            }
        }
    }
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Post Release', "[${getBuildBranch()}] Kogito Examples", [env.CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

String getRepoName() {
    return env.REPO_NAME
}

String getProjectVersion() {
    return params.PROJECT_VERSION
}

String getGitTag() {
    return params.GIT_TAG ?: getProjectVersion()
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsID() {
    return env.AUTHOR_CREDS_ID
}

//////////////////////////////////////////////////////////////////////////////
// Git
//////////////////////////////////////////////////////////////////////////////

void checkoutTag(String repo, String tagName, String localBranchName = tagName) {
    deleteDir()
    checkout(githubscm.resolveRepository(repo, getGitAuthor(), getBuildBranch(), false, getGitAuthorCredsID()))
    // Need to manually checkout branch since we are in 'detached HEAD' state after the git checkout command.
    sh "git checkout tags/${tagName} -b ${localBranchName}"
}

void installGithubCLI() {
    sh """
    wget https://github.com/cli/cli/releases/download/v${env.GITHUB_CLI_VERSION}/gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz
    tar xzf gh_${env.GITHUB_CLI_VERSION}_linux_amd64.tar.gz
    mv gh_${env.GITHUB_CLI_VERSION}_linux_amd64/bin/gh .
    rm -r gh_${env.GITHUB_CLI_VERSION}_linux_amd64*
    """
}

void setDefaultBranch(String defaultBranch) {
    withCredentials([string(credentialsId: env.GITHUB_TOKEN_CREDS_ID, variable: 'GITHUB_TOKEN')]) {
        // gh command from https://github.com/cli/cli/issues/929#issuecomment-629253585
        def newDefaultBranch = sh(script: "../gh api -XPATCH 'repos/${getGitAuthor()}/${getRepoName()}' -f default_branch=${defaultBranch} | jq '.default_branch'", returnStdout: true).trim()
        if (newDefaultBranch == "\"${defaultBranch}\"") {
            echo "[INFO] ${getGitAuthor()}/${getRepoName()}'s default branch has been updated to ${newDefaultBranch}."
        } else {
            error 'Couldn\'t update default branch.'
        }
    }
}

void forcePushProtectedBranch(String defaultBranch, String tempBranch) {
    setDefaultBranch(tempBranch)
    withCredentials([usernamePassword(credentialsId: getGitAuthorCredsID(), usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
        sh """
        git config --local credential.helper \"!f() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; f\"
        git push --delete origin ${defaultBranch}
        git push origin ${defaultBranch}
        """
    }
    setDefaultBranch(defaultBranch)
}
