commit d8d7340021c57390f98c5d9f7912f0e988f29cc1
Author: Pere Fernandez <pefernan@users.noreply.github.com>
Date:   Mon May 15 21:21:31 2023 +0200

    Remove Keycloak Spring Boot Adapter

diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/docker-compose/docker-compose.yml b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/docker-compose/docker-compose.yml
index 896ba7810..a4d8633e6 100755
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/docker-compose/docker-compose.yml
+++ b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/docker-compose/docker-compose.yml
@@ -115,19 +115,3 @@ services:
     environment:
       KOGITO_DATAINDEX_HTTP_URL: http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:8180/graphql
       KOGITO_TASK_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:8480/auth -Dkogito.consoles.keycloak.config.health-check-url=http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:8480/auth/realms/kogito/.well-known/openid-configuration
-
-  process-usertasks-with-security-oidc-springboot-with-console:
-    container_name: process-usertasks-with-security-oidc-springboot-with-console
-    image: org.kie.kogito.examples/process-usertasks-with-security-oidc-springboot-with-console:${KOGITO_VERSION}
-    ports:
-      - 8080:8080
-    depends_on:
-      infinispan:
-          condition: service_healthy
-      data-index:
-          condition: service_started
-    environment:
-      MANAGEMENT_ENDPOINTS_WEB_CORS_ALLOWED_ORIGINS: "/.*/"
-      INFINISPAN_REMOTE_SERVER_LIST: infinispan:11222
-      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
-      KEYCLOAK_AUTH_SERVER_URL: http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:8480/auth
\ No newline at end of file
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/pom.xml b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/pom.xml
index ac425f103..a288e67c9 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/pom.xml
+++ b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/pom.xml
@@ -28,13 +28,6 @@
         <type>pom</type>
         <scope>import</scope>
       </dependency>
-      <dependency>
-        <groupId>org.keycloak.bom</groupId>
-        <artifactId>keycloak-adapter-bom</artifactId>
-        <version>${version.org.keycloak}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
       <dependency>
         <groupId>org.infinispan</groupId>
         <artifactId>infinispan-bom</artifactId>
@@ -65,8 +58,8 @@
       <artifactId>spring-boot-starter-security</artifactId>
     </dependency>
     <dependency>
-      <groupId>org.keycloak</groupId>
-      <artifactId>keycloak-spring-boot-starter</artifactId>
+      <groupId>org.springframework.security</groupId>
+      <artifactId>spring-security-oauth2-authorization-server</artifactId>
     </dependency>
 
     <dependency>
@@ -79,7 +72,7 @@
     </dependency>
     <dependency>
       <groupId>org.infinispan</groupId>
-      <artifactId>infinispan-spring-boot-starter-remote</artifactId>
+      <artifactId>infinispan-spring-boot3-starter-remote</artifactId>
     </dependency>
     <dependency>
       <groupId>org.kie.kogito</groupId>
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/main/java/org/kie/kogito/springboot/DefaultWebSecurityConfig.java b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/main/java/org/kie/kogito/springboot/DefaultWebSecurityConfig.java
index d72bb6a17..b7bae3369 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/main/java/org/kie/kogito/springboot/DefaultWebSecurityConfig.java
+++ b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/main/java/org/kie/kogito/springboot/DefaultWebSecurityConfig.java
@@ -15,50 +15,26 @@
  */
 package org.kie.kogito.springboot;
 
-import org.keycloak.adapters.springsecurity.KeycloakConfiguration;
-import org.keycloak.adapters.springsecurity.KeycloakSecurityComponents;
-import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider;
-import org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.ComponentScan;
-import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
-import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;
-import org.springframework.security.core.session.SessionRegistryImpl;
-import org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy;
-import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.web.SecurityFilterChain;
 
-@KeycloakConfiguration
-@ComponentScan(basePackageClasses = KeycloakSecurityComponents.class)
-class DefaultWebSecurityConfig extends KeycloakWebSecurityConfigurerAdapter {
-
-    @Autowired
-    public void configureGlobal(AuthenticationManagerBuilder auth) {
-        SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper();
-        grantedAuthorityMapper.setPrefix("ROLE_");
-
-        KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider();
-        keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(grantedAuthorityMapper);
-
-        auth.authenticationProvider(keycloakAuthenticationProvider);
-    }
+@Configuration
+@EnableWebSecurity
+class DefaultWebSecurityConfig {
 
     @Bean
-    @Override
-    protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
-        return new RegisterSessionAuthenticationStrategy(
-                new SessionRegistryImpl());
-    }
-
-    @Override
-    protected void configure(HttpSecurity http) throws Exception {
-        super.configure(http);
-        http.authorizeRequests()
+    public SecurityFilterChain configure(HttpSecurity http) throws Exception {
+        http.authorizeHttpRequests()
                 .anyRequest()
-                .permitAll();
+                .authenticated()
+                .and()
+                .oauth2ResourceServer().jwt();
         http.cors()
                 .and()
                 .csrf().disable();
+        return http.build();
     }
 }
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/main/java/org/kie/kogito/springboot/KeycloakResolverConfig.java b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/main/java/org/kie/kogito/springboot/KeycloakResolverConfig.java
deleted file mode 100644
index add510733..000000000
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/main/java/org/kie/kogito/springboot/KeycloakResolverConfig.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright 2022 Red Hat, Inc. and/or its affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.kie.kogito.springboot;
-
-import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-
-@Configuration
-public class KeycloakResolverConfig {
-
-    @Bean
-    public KeycloakSpringBootConfigResolver KeycloakConfigResolver() {
-        return new KeycloakSpringBootConfigResolver();
-    }
-}
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/main/resources/application.properties b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/main/resources/application.properties
index 171e1bc03..3d3238bea 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/main/resources/application.properties
+++ b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/main/resources/application.properties
@@ -1,22 +1,7 @@
 server.address=0.0.0.0
 infinispan.remote.server-list=127.0.0.1:11222
 
-keycloak.auth-server-url=http://localhost:8480/auth
-
-keycloak.realm=kogito
-keycloak.resource=kogito-app
-keycloak.credentials.secret=secret
-keycloak.cors=true
-keycloak.ssl-required=external
-keycloak.bearer-only=true
-keycloak.use-resource-role-mappings=true
-
-kogito.dataindex.http.url=http://localhost:8180
-kogito.service.url=http://localhost:8080
-kogito.persistence.type=infinispan
-
-spring.kafka.bootstrap-servers=localhost:9092
-
+spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8480/auth/realms/kogito
 
 #mp.messaging.outgoing.kogito-processinstances-events.bootstrap.servers=localhost:9092
 mp.messaging.outgoing.kogito-processinstances-events.connector=smallrye-kafka
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/test/java/org/acme/travels/ApprovalsRestIT.java b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/test/java/org/acme/travels/ApprovalsRestIT.java
index b39fb4769..1ec08b142 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/test/java/org/acme/travels/ApprovalsRestIT.java
+++ b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/test/java/org/acme/travels/ApprovalsRestIT.java
@@ -15,10 +15,11 @@
  */
 package org.acme.travels;
 
+import io.restassured.RestAssured;
+import io.restassured.http.ContentType;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
-import org.keycloak.representations.AccessTokenResponse;
 import org.kie.kogito.springboot.KogitoSpringbootApplication;
 import org.kie.kogito.testcontainers.springboot.InfinispanSpringBootTestResource;
 import org.kie.kogito.testcontainers.springboot.KafkaSpringBootTestResource;
@@ -29,16 +30,13 @@ import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit.jupiter.SpringExtension;
 
-import io.restassured.RestAssured;
-import io.restassured.http.ContentType;
-
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
 
 @ExtendWith(SpringExtension.class)
 @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)
-@ContextConfiguration(initializers = { KeycloakSpringBootTestResource.class, InfinispanSpringBootTestResource.Conditional.class, KafkaSpringBootTestResource.class })
+@ContextConfiguration(initializers = {KeycloakSpringBootTestResource.class, InfinispanSpringBootTestResource.Conditional.class, KafkaSpringBootTestResource.class})
 public class ApprovalsRestIT {
 
     @LocalServerPort
@@ -60,8 +58,7 @@ public class ApprovalsRestIT {
                 .when()
                 .post("/approvals")
                 .then()
-                .statusCode(400);
-
+                .statusCode(401);
     }
 
     @Test
@@ -96,7 +93,7 @@ public class ApprovalsRestIT {
                 .get("/approvals/" + id + "/tasks?user=admin&group=managers")
                 .then()
                 .statusCode(200)
-                .body("$.size", is(1))
+                .body("size()", is(1))
                 .body("[0].name", is("firstLineApproval"))
                 .extract()
                 .path("[0].id");
@@ -135,8 +132,8 @@ public class ApprovalsRestIT {
                 .param("client_secret", "secret")
                 .when()
                 .post(keycloakUrl + "/realms/kogito/protocol/openid-connect/token")
-                .as(AccessTokenResponse.class).getToken();
-
+                .then()
+                .extract()
+                .path("access_token");
     }
-
 }
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/test/resources/application.properties b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/test/resources/application.properties
index 7740348dd..a1451ed66 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/test/resources/application.properties
+++ b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot-with-console/src/test/resources/application.properties
@@ -1,8 +1,5 @@
 
-keycloak.realm=kogito
-keycloak.resource=kogito-app
-keycloak.credentials.secret=secret
-keycloak.bearer-only=true
+spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8480/auth/realms/kogito
 
 spring.main.allow-bean-definition-overriding=true
 
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/pom.xml b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/pom.xml
index 9a2c7809d..861df30b6 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/pom.xml
+++ b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/pom.xml
@@ -27,13 +27,6 @@
         <type>pom</type>
         <scope>import</scope>
       </dependency>
-      <dependency>
-        <groupId>org.keycloak.bom</groupId>
-        <artifactId>keycloak-adapter-bom</artifactId>
-        <version>${version.org.keycloak}</version>
-        <type>pom</type>
-        <scope>import</scope>
-      </dependency>
     </dependencies>
   </dependencyManagement>
 
@@ -47,8 +40,8 @@
       <artifactId>spring-boot-starter-security</artifactId>
     </dependency>
     <dependency>
-      <groupId>org.keycloak</groupId>
-      <artifactId>keycloak-spring-boot-starter</artifactId>
+      <groupId>org.springframework.security</groupId>
+      <artifactId>spring-security-oauth2-authorization-server</artifactId>
     </dependency>
 
     <!-- kogito -->
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/main/java/org/kie/kogito/springboot/DefaultWebSecurityConfig.java b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/main/java/org/kie/kogito/springboot/DefaultWebSecurityConfig.java
index e1e9fc439..b7bae3369 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/main/java/org/kie/kogito/springboot/DefaultWebSecurityConfig.java
+++ b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/main/java/org/kie/kogito/springboot/DefaultWebSecurityConfig.java
@@ -15,50 +15,26 @@
  */
 package org.kie.kogito.springboot;
 
-import org.keycloak.adapters.springsecurity.KeycloakConfiguration;
-import org.keycloak.adapters.springsecurity.KeycloakSecurityComponents;
-import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider;
-import org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.ComponentScan;
-import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
-import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;
-import org.springframework.security.core.session.SessionRegistryImpl;
-import org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy;
-import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.security.web.SecurityFilterChain;
 
-@KeycloakConfiguration
-@ComponentScan(basePackageClasses = KeycloakSecurityComponents.class)
-class DefaultWebSecurityConfig extends KeycloakWebSecurityConfigurerAdapter {
-
-    @Autowired
-    public void configureGlobal(AuthenticationManagerBuilder auth) {
-        SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper();
-        grantedAuthorityMapper.setPrefix("ROLE_");
-
-        KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider();
-        keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(grantedAuthorityMapper);
-
-        auth.authenticationProvider(keycloakAuthenticationProvider);
-    }
+@Configuration
+@EnableWebSecurity
+class DefaultWebSecurityConfig {
 
     @Bean
-    @Override
-    protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
-        return new RegisterSessionAuthenticationStrategy(
-                new SessionRegistryImpl());
-    }
-
-    @Override
-    protected void configure(HttpSecurity http) throws Exception {
-        super.configure(http);
-        http.csrf().disable()
-                .authorizeRequests()
-                .antMatchers("/approvals/**")
+    public SecurityFilterChain configure(HttpSecurity http) throws Exception {
+        http.authorizeHttpRequests()
+                .anyRequest()
                 .authenticated()
-                .antMatchers("/docs/**").permitAll()
-                .anyRequest().permitAll();
+                .and()
+                .oauth2ResourceServer().jwt();
+        http.cors()
+                .and()
+                .csrf().disable();
+        return http.build();
     }
 }
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/main/java/org/kie/kogito/springboot/KeycloakResolverConfig.java b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/main/java/org/kie/kogito/springboot/KeycloakResolverConfig.java
deleted file mode 100644
index add510733..000000000
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/main/java/org/kie/kogito/springboot/KeycloakResolverConfig.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright 2022 Red Hat, Inc. and/or its affiliates.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.kie.kogito.springboot;
-
-import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-
-@Configuration
-public class KeycloakResolverConfig {
-
-    @Bean
-    public KeycloakSpringBootConfigResolver KeycloakConfigResolver() {
-        return new KeycloakSpringBootConfigResolver();
-    }
-}
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/main/resources/application.properties b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/main/resources/application.properties
index 05c02cbc0..ee2be1c5d 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/main/resources/application.properties
+++ b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/main/resources/application.properties
@@ -2,10 +2,7 @@ server.address=0.0.0.0
 
 spring.main.allow-bean-definition-overriding=true
 
-keycloak.auth-server-url=http://localhost:8281/auth
-keycloak.realm=kogito
-keycloak.resource=kogito-app
-keycloak.credentials.secret=secret
-keycloak.bearer-only=true
+spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8281/auth/realms/kogito
+
 
 
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/test/java/org/acme/travels/ApprovalsRestIT.java b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/test/java/org/acme/travels/ApprovalsRestIT.java
index 37d1a3bd9..193d703af 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/test/java/org/acme/travels/ApprovalsRestIT.java
+++ b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/test/java/org/acme/travels/ApprovalsRestIT.java
@@ -15,10 +15,11 @@
  */
 package org.acme.travels;
 
+import io.restassured.RestAssured;
+import io.restassured.http.ContentType;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
-import org.keycloak.representations.AccessTokenResponse;
 import org.kie.kogito.springboot.KogitoSpringbootApplication;
 import org.kie.kogito.testcontainers.springboot.KeycloakSpringBootTestResource;
 import org.springframework.beans.factory.annotation.Value;
@@ -27,9 +28,6 @@ import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit.jupiter.SpringExtension;
 
-import io.restassured.RestAssured;
-import io.restassured.http.ContentType;
-
 import static io.restassured.RestAssured.given;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.notNullValue;
@@ -59,7 +57,6 @@ public class ApprovalsRestIT {
                 .post("/approvals")
                 .then()
                 .statusCode(401);
-
     }
 
     @Test
@@ -83,7 +80,7 @@ public class ApprovalsRestIT {
                 .get("/approvals")
                 .then()
                 .statusCode(200)
-                .body("$.size()", is(1), "[0].id", is(id));
+                .body("size()", is(1), "[0].id", is(id));
 
         // get just started approval
         given()
@@ -105,7 +102,7 @@ public class ApprovalsRestIT {
                 .get("/approvals/" + id + "/tasks?user=admin&group=managers")
                 .then()
                 .statusCode(200)
-                .body("$.size", is(1))
+                .body("size()", is(1))
                 .body("[0].name", is("firstLineApproval"))
                 .extract()
                 .path("[0].id");
@@ -144,8 +141,8 @@ public class ApprovalsRestIT {
                 .param("client_secret", "secret")
                 .when()
                 .post(keycloakUrl + "/realms/kogito/protocol/openid-connect/token")
-                .as(AccessTokenResponse.class).getToken();
-
+                .then()
+                .extract()
+                .path("access_token");
     }
-
 }
diff --git a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/test/resources/application.properties b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/test/resources/application.properties
index a2dac0b06..3be2ed592 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/test/resources/application.properties
+++ b/kogito-springboot-examples/process-usertasks-with-security-oidc-springboot/src/test/resources/application.properties
@@ -1,7 +1,3 @@
-keycloak.auth-server-url=http://localhost:8281/auth
-keycloak.realm=kogito
-keycloak.resource=kogito-app
-keycloak.credentials.secret=secret
-keycloak.bearer-only=true
+spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8281/auth/realms/kogito
 
 spring.main.allow-bean-definition-overriding=true
\ No newline at end of file
diff --git a/kogito-springboot-examples/process-usertasks-with-security-springboot/pom.xml b/kogito-springboot-examples/process-usertasks-with-security-springboot/pom.xml
index 15b43adf8..261542775 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-springboot/pom.xml
+++ b/kogito-springboot-examples/process-usertasks-with-security-springboot/pom.xml
@@ -45,6 +45,12 @@
       <groupId>org.kie.kogito</groupId>
       <artifactId>kogito-processes-spring-boot-starter</artifactId>
     </dependency>
+
+    <dependency>
+      <groupId>com.fasterxml.jackson.datatype</groupId>
+      <artifactId>jackson-datatype-jakarta-jsonp</artifactId>
+    </dependency>
+
     <dependency>
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-starter-test</artifactId>
diff --git a/kogito-springboot-examples/process-usertasks-with-security-springboot/src/main/java/org/kie/kogito/tests/DefaultWebSecurityConfig.java b/kogito-springboot-examples/process-usertasks-with-security-springboot/src/main/java/org/kie/kogito/tests/DefaultWebSecurityConfig.java
index 714b155cb..0c1092cd3 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-springboot/src/main/java/org/kie/kogito/tests/DefaultWebSecurityConfig.java
+++ b/kogito-springboot-examples/process-usertasks-with-security-springboot/src/main/java/org/kie/kogito/tests/DefaultWebSecurityConfig.java
@@ -21,22 +21,24 @@ import org.springframework.context.annotation.Configuration;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
-import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
 import org.springframework.security.crypto.password.NoOpPasswordEncoder;
 import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.security.web.SecurityFilterChain;
 
-@Configuration("kieServerSecurity")
+@Configuration
 @EnableWebSecurity
-public class DefaultWebSecurityConfig extends WebSecurityConfigurerAdapter {
+public class DefaultWebSecurityConfig {
 
-    @Override
-    protected void configure(HttpSecurity http) throws Exception {
+    @Bean
+    public SecurityFilterChain configure(HttpSecurity http) throws Exception {
         http
                 .csrf().disable()
-                .authorizeRequests()
-                .antMatchers("/**").authenticated()
+                .authorizeHttpRequests()
+                .requestMatchers("/**").authenticated()
                 .and()
                 .httpBasic();
+
+        return http.build();
     }
 
     @Autowired
diff --git a/kogito-springboot-examples/process-usertasks-with-security-springboot/src/main/java/org/kie/kogito/tests/LogEventPublisher.java b/kogito-springboot-examples/process-usertasks-with-security-springboot/src/main/java/org/kie/kogito/tests/LogEventPublisher.java
index 882c0ef2e..017ae966b 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-springboot/src/main/java/org/kie/kogito/tests/LogEventPublisher.java
+++ b/kogito-springboot-examples/process-usertasks-with-security-springboot/src/main/java/org/kie/kogito/tests/LogEventPublisher.java
@@ -19,6 +19,7 @@ import java.util.Collection;
 
 import org.kie.kogito.event.DataEvent;
 import org.kie.kogito.event.EventPublisher;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
@@ -27,7 +28,12 @@ import com.fasterxml.jackson.databind.ObjectMapper;
 @Component
 public class LogEventPublisher implements EventPublisher {
 
-    ObjectMapper json = new ObjectMapper();
+    private ObjectMapper json;
+
+    @Autowired
+    public void setMapper(ObjectMapper json) {
+        this.json = json;
+    }
 
     @Override
     public void publish(DataEvent<?> event) {
diff --git a/kogito-springboot-examples/process-usertasks-with-security-springboot/src/test/java/org/acme/travels/security/springboot/ApprovalsRestTest.java b/kogito-springboot-examples/process-usertasks-with-security-springboot/src/test/java/org/acme/travels/security/springboot/ApprovalsRestTest.java
index 8ec6a8a98..d9cca3c9a 100644
--- a/kogito-springboot-examples/process-usertasks-with-security-springboot/src/test/java/org/acme/travels/security/springboot/ApprovalsRestTest.java
+++ b/kogito-springboot-examples/process-usertasks-with-security-springboot/src/test/java/org/acme/travels/security/springboot/ApprovalsRestTest.java
@@ -15,6 +15,8 @@
  */
 package org.acme.travels.security.springboot;
 
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -99,7 +101,7 @@ public class ApprovalsRestTest {
                 .get("/approvals/" + id + "/tasks?user=admin&group=managers")
                 .then()
                 .statusCode(200)
-                .body("$.size", is(1))
+                .body("size()", is(1))
                 .body("[0].name", is("firstLineApproval"))
                 .extract()
                 .path("[0].id");
