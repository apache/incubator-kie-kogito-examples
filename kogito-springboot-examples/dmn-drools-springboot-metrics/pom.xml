<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>dmn-drools-springboot-metrics</artifactId>
  <groupId>org.acme.examples</groupId>
  <version>2.0.0-SNAPSHOT</version>

  <name>Kogito Example :: DMN Drools SpringBoot Metrics</name>

  <properties>
    <version.org.kie.kogito>2.0.0-SNAPSHOT</version.org.kie.kogito>
    <kogito.bom.version>2.0.0-SNAPSHOT</kogito.bom.version>
    <version.org.testcontainers>1.17.3</version.org.testcontainers>
    <version.jib.plugin>3.3.1</version.jib.plugin>
    <version.failsafe.plugin>3.1.2</version.failsafe.plugin>
    <version.org.springframework.boot>2.6.6</version.org.springframework.boot>
    <version.clean.plugin>3.1.0</version.clean.plugin>
    <version.resources.plugin>3.1.0</version.resources.plugin>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.kie.kogito</groupId>
        <artifactId>kogito-spring-boot-bom</artifactId>
        <version>${kogito.bom.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.kie.kogito</groupId>
      <artifactId>kogito-decisions-spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kie.kogito</groupId>
      <artifactId>kogito-rules-spring-boot-starter</artifactId>
    </dependency>

    <dependency>
      <groupId>org.kie.kogito</groupId>
      <artifactId>kogito-addons-springboot-monitoring-prometheus</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${version.org.testcontainers}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.kie.kogito</groupId>
      <artifactId>kogito-test-utils</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
      <resource>
        <directory>src/test/filtered-resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.kie.kogito</groupId>
        <artifactId>kogito-maven-plugin</artifactId>
        <version>${version.org.kie.kogito}</version>
        <extensions>true</extensions>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${version.org.springframework.boot}</version>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>${version.clean.plugin}</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>docker-compose/grafana/provisioning/dashboards</directory>
              <excludes>
                <exclude>dashboard.yml</exclude>
              </excludes>
              <followSymlinks>false</followSymlinks>
            </fileset>
            <fileset>
              <directory>src/main/resources/META-INF/dashboards</directory>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
      <!-- Keep this after kogito-maven-plugin, since both are bind to package phase, and this one
      has to be executed after !-->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${version.resources.plugin}</version>
        <executions>
          <execution>
            <id>copy-filtered-resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.basedir}/src/main/resources/META-INF/dashboards</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}/src/main/filtered-resources/META-INF/dashboards</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-resources</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.basedir}/docker-compose/grafana/provisioning/dashboards</outputDirectory>
              <resources>
                <resource>
                  <directory>
                    ${project.build.directory}/classes/META-INF/resources/monitoring/dashboards
                  </directory>
                  <filtering>false</filtering>
                  <excludes>
                    <exclude>**/list.json</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-docker-compose-for-tests</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.testOutputDirectory}</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.basedir}</directory>
                  <includes>
                    <include>docker-compose.yml</include>
                    <include>docker-compose/</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <version>${version.jib.plugin}</version>
        <configuration>
          <to>
            <image>${project.groupId}/${project.artifactId}:1.0</image>
          </to>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>dockerBuild</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${version.failsafe.plugin}</version>
        <configuration>
          <classesDirectory>${project.build.outputDirectory}</classesDirectory>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>